import { NextResponse } from "next/server"
import { settingsStore } from "@/lib/settings-store"
import { validateSettings } from "@/lib/exchange-config"

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
function isAuthenticated(request: Request) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const url = new URL(request.url)
    const tokenFromUrl = url.searchParams.get("token")
    const authHeader = request.headers.get("authorization")
    const tokenFromHeader = authHeader?.replace("Bearer ", "")

    const token = tokenFromUrl || tokenFromHeader

    if (!token) {
      console.log("[SERVER] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ")
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (admin_timestamp_randomstring)
    const tokenParts = token.split("_")
    if (tokenParts.length !== 3 || tokenParts[0] !== "admin") {
      console.log("[SERVER] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞:", token)
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞ (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
    const timestamp = Number.parseInt(tokenParts[1])
    const now = Date.now()
    const tokenAge = now - timestamp
    const maxAge = 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞

    if (tokenAge > maxAge) {
      console.log("[SERVER] –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫:", { tokenAge, maxAge })
      return false
    }

    console.log("[SERVER] –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:", token)
    return true
  } catch (error) {
    console.error("[SERVER] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(message: string) {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN
    const chatId = process.env.TELEGRAM_CHAT_ID

    if (!botToken || !chatId) {
      console.error("[SERVER] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram")
      return
    }

    const url = `https://api.telegram.org/bot${botToken}/sendMessage`
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "HTML",
      }),
    })

    const data = await response.json()
    if (!response.ok) {
      console.error("[SERVER] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:", data)
    } else {
      console.log("[SERVER] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    }
  } catch (error) {
    console.error("[SERVER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:", error)
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
export async function GET(request: Request) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (!isAuthenticated(request)) {
      console.log("[SERVER] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
      return NextResponse.json(
        {
          success: false,
          message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
        },
        { status: 401 },
      )
    }

    console.log("[SERVER] –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É—Ä—Å–∞")

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const settings = settingsStore.getSettings()

    console.log("[SERVER] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É—Ä—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:", settings)

    return NextResponse.json({
      success: true,
      ...settings,
    })
  } catch (error) {
    console.error("[SERVER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É—Ä—Å–∞:", error)
    return NextResponse.json(
      {
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
      },
      { status: 500 },
    )
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
export async function POST(request: Request) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (!isAuthenticated(request)) {
      console.log("[SERVER] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
      return NextResponse.json(
        {
          success: false,
          message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
        },
        { status: 401 },
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const { markup, useManualRate, manualRate } = await request.json()

    console.log("[SERVER] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", { markup, useManualRate, manualRate })

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const validation = validateSettings({ markup, useManualRate, manualRate })
    if (!validation.isValid) {
      return NextResponse.json(
        {
          success: false,
          message: validation.errors.join(", "),
        },
        { status: 400 },
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const previousSettings = settingsStore.getSettings()

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const newSettings = settingsStore.setSettings({
      markup,
      useManualRate,
      manualRate,
    })

    console.log("[SERVER] –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É—Ä—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:", newSettings)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    let notificationMessage = "<b>üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É—Ä—Å–∞</b>\n\n"

    if (useManualRate !== previousSettings.useManualRate) {
      notificationMessage += `<b>–†–µ–∂–∏–º:</b> ${
        useManualRate ? "–†—É—á–Ω–æ–π –∫—É—Ä—Å ‚úèÔ∏è" : "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–¶–ë –†–§ + –Ω–∞–¥–±–∞–≤–∫–∞) ü§ñ"
      }\n`
    }

    if (useManualRate) {
      if (manualRate !== previousSettings.manualRate) {
        notificationMessage += `<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä—É—á–Ω–æ–π –∫—É—Ä—Å:</b> ${manualRate} ‚ÇΩ\n`
        if (previousSettings.manualRate) {
          const diff = manualRate - previousSettings.manualRate
          const diffPercent = ((diff / previousSettings.manualRate) * 100).toFixed(2)
          const diffSymbol = diff > 0 ? "üìà" : "üìâ"
          notificationMessage += `<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> ${diff > 0 ? "+" : ""}${diff.toFixed(2)} ‚ÇΩ (${
            diff > 0 ? "+" : ""
          }${diffPercent}%) ${diffSymbol}\n`
        }
      }
    } else {
      if (markup !== previousSettings.markup) {
        notificationMessage += `<b>–ù–∞–¥–±–∞–≤–∫–∞ –∫ –∫—É—Ä—Å—É –¶–ë:</b> ${markup} ‚ÇΩ\n`
        const diff = markup - previousSettings.markup
        notificationMessage += `<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–¥–±–∞–≤–∫–∏:</b> ${diff > 0 ? "+" : ""}${diff.toFixed(2)} ‚ÇΩ\n`
      }
    }

    notificationMessage += `\n<b>–í–µ—Ä—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:</b> ${newSettings.version}`
    notificationMessage += `\n<b>–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b> ${new Date().toLocaleString("ru-RU")}`
    notificationMessage += `\n\n<i>üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ</i>`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (
      useManualRate !== previousSettings.useManualRate ||
      (useManualRate && manualRate !== previousSettings.manualRate) ||
      (!useManualRate && markup !== previousSettings.markup)
    ) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Ç–≤–µ—Ç
      sendTelegramNotification(notificationMessage).catch((error) => {
        console.error("[SERVER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error)
      })
    }

    console.log("[SERVER] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")

    return NextResponse.json({
      success: true,
      message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã",
      version: newSettings.version,
      shouldRefreshRate: true, // –§–ª–∞–≥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å
    })
  } catch (error) {
    console.error("[SERVER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É—Ä—Å–∞:", error)
    return NextResponse.json(
      {
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
      },
      { status: 500 },
    )
  }
}
