import { NextResponse } from "next/server"
import fs from "fs"
import path from "path"

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
const alertsFilePath = path.join(process.cwd(), "data", "rate-alerts.json")

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
function isAuthenticated(request: Request) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const url = new URL(request.url)
    const tokenFromUrl = url.searchParams.get("token")
    const authHeader = request.headers.get("authorization")
    const tokenFromHeader = authHeader?.replace("Bearer ", "")

    const token = tokenFromUrl || tokenFromHeader

    if (!token) {
      console.log("[SERVER] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ")
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (admin_timestamp_randomstring)
    const tokenParts = token.split("_")
    if (tokenParts.length !== 3 || tokenParts[0] !== "admin") {
      console.log("[SERVER] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞:", token)
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞ (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
    const timestamp = Number.parseInt(tokenParts[1])
    const now = Date.now()
    const tokenAge = now - timestamp
    const maxAge = 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞

    if (tokenAge > maxAge) {
      console.log("[SERVER] –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫:", { tokenAge, maxAge })
      return false
    }

    console.log("[SERVER] –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:", token)
    return true
  } catch (error) {
    console.error("[SERVER] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(message: string) {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN
    const chatId = process.env.TELEGRAM_CHAT_ID

    if (!botToken || !chatId) {
      console.error("[SERVER] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram")
      return
    }

    const url = `https://api.telegram.org/bot${botToken}/sendMessage`
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "HTML",
      }),
    })

    const data = await response.json()
    if (!response.ok) {
      console.error("[SERVER] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:", data)
    } else {
      console.log("[SERVER] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    }
  } catch (error) {
    console.error("[SERVER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:", error)
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
export async function GET(request: Request) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (!isAuthenticated(request)) {
      console.log("[SERVER] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
      return NextResponse.json(
        {
          success: false,
          message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
        },
        { status: 401 },
      )
    }

    console.log("[SERVER] –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –∫—É—Ä—Å–µ")

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const dir = path.dirname(alertsFilePath)
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if (!fs.existsSync(alertsFilePath)) {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const defaultAlerts = {
        enabled: true,
        thresholdPercent: 3.0,
        lastChecked: new Date().toISOString(),
        lastAlertSent: null,
      }
      fs.writeFileSync(alertsFilePath, JSON.stringify(defaultAlerts, null, 2))
      console.log("[SERVER] –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    }

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const alertsData = fs.readFileSync(alertsFilePath, "utf8")
    const alerts = JSON.parse(alertsData)

    console.log("[SERVER] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω—ã:", alerts)

    return NextResponse.json({
      success: true,
      ...alerts,
    })
  } catch (error) {
    console.error("[SERVER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:", error)
    return NextResponse.json(
      {
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π",
      },
      { status: 500 },
    )
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
export async function POST(request: Request) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (!isAuthenticated(request)) {
      console.log("[SERVER] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
      return NextResponse.json(
        {
          success: false,
          message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
        },
        { status: 401 },
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const { enabled, thresholdPercent } = await request.json()

    console.log("[SERVER] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:", { enabled, thresholdPercent })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if (typeof enabled !== "boolean") {
      return NextResponse.json(
        {
          success: false,
          message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π",
        },
        { status: 400 },
      )
    }

    if (typeof thresholdPercent !== "number" || thresholdPercent <= 0) {
      return NextResponse.json(
        {
          success: false,
          message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        },
        { status: 400 },
      )
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const dir = path.dirname(alertsFilePath)
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true })
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    let previousAlerts = { enabled: true, thresholdPercent: 3.0, lastChecked: null, lastAlertSent: null }
    if (fs.existsSync(alertsFilePath)) {
      const alertsData = fs.readFileSync(alertsFilePath, "utf8")
      previousAlerts = JSON.parse(alertsData)
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const alerts = {
      enabled,
      thresholdPercent,
      lastChecked: previousAlerts.lastChecked || new Date().toISOString(),
      lastAlertSent: previousAlerts.lastAlertSent,
    }

    fs.writeFileSync(alertsFilePath, JSON.stringify(alerts, null, 2))

    console.log("[SERVER] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:", alerts)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    if (enabled !== previousAlerts.enabled || thresholdPercent !== previousAlerts.thresholdPercent) {
      const notificationMessage = `
<b>‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π</b>

<b>–û–ø–æ–≤–µ—â–µ–Ω–∏—è:</b> ${enabled ? "–í–∫–ª—é—á–µ–Ω—ã ‚úÖ" : "–í—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"}
<b>–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b> ${thresholdPercent}%

<b>–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b> ${new Date().toLocaleString("ru-RU")}
      `
      await sendTelegramNotification(notificationMessage)
    }

    return NextResponse.json({
      success: true,
      message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
    })
  } catch (error) {
    console.error("[SERVER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:", error)
    return NextResponse.json(
      {
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π",
      },
      { status: 500 },
    )
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ PUT-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
export async function PUT(request: Request) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (!isAuthenticated(request)) {
      console.log("[SERVER] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
      return NextResponse.json(
        {
          success: false,
          message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
        },
        { status: 401 },
      )
    }

    console.log("[SERVER] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è")

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
    const rateResponse = await fetch("https://www.cbr-xml-daily.ru/daily_json.js")
    const rateData = await rateResponse.json()
    const currentRate = rateData.Valute.CNY.Value.toFixed(2)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const testMessage = `
<b>üîî –¢–ï–°–¢–û–í–û–ï –û–ü–û–í–ï–©–ï–ù–ò–ï</b>

<b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¶–ë –†–§:</b> ${currentRate} ‚ÇΩ
<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${new Date().toLocaleString("ru-RU")}

<i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.</i>
    `

    await sendTelegramNotification(testMessage)

    return NextResponse.json({
      success: true,
      message: "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
    })
  } catch (error) {
    console.error("[SERVER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:", error)
    return NextResponse.json(
      {
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è",
      },
      { status: 500 },
    )
  }
}
